#!/bin/bash

if [ $# = 0 ]; then
    cat <<EOF
Usage:

    $(basename "${0}") search_query [executable] [--behaviour <i3|swap|nomark>] [--negate]

    search_query             the window class or window title of the target window
    executable     (optional)   run a command when no windows are matched
    --negate,-n    (optional)   inverse search
    --behaviour,-b (optional)   <i3> (default)
                              behaves just like the i3 scratchpad
                               
                             <swap>
                              hide the current window and show the next in only one command
                               
                             <nomark>
                              avoids the use of bspwm marks, with the disadvantage that windows
                              that are forcibly hidden, their stack positions will be reset
EOF
    exit 0
fi

POSITIONAL_ARGS=()

BEHAVIOUR="i3"
while [[ $# -gt 0 ]]; do
  case $1 in
    -b|--behaviour)
      BEHAVIOUR="$2"
      shift # past argument
      shift # past value
      ;;
    -n|--negative)
      NEGATIVE=1
      shift # past argument with no value
      ;;
    -*|--*)
      echo "Unknown option $i"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

# match window title and class
if [ $NEGATIVE = 1 ];then
    id=$(wmctrl -lx|rg -v "${1}"|awk '{ print $1 }')
else
    id=$(wmctrl -lx|rg "${1}"|awk '{ print $1 }')
fi

# execute program if theres no matches
if [ -z "$id" ] && ! [ -z "$2" ]; then
    ${2}
    exit
fi

rawindex=$(cat <<< "$id"|cat -n|grep -i "$(bspc query -N -n .focused.floating||echo "%#@")")

idmarkded=$(cat <<< "$id"|rg -i "$(echo "$(bspc query -N -n .hidden.marked.window||echo "%@#")"|sed -z 's/\n\(\w\)/|\1/g')")

if [ "$BEHAVIOUR" != "nomark" ];then
    # show the marked hidden window
    if ! [ -z "$idmarkded" ];then
        bspc node $(cat <<< "$idmarkded"|head -n 1) --flag hidden=off --to-monitor focused --focus
        exit
    fi
fi


# index of the first matched visible window 
index=$(cat <<< "$id"|cat -n|rg -i "$(bspc query -N -n .floating.\!hidden.window|sed -z 's/\n\(\w\)/|\1/g')"|head -n 1|awk '{print $1}')


idhidden=$(cat <<< "$id"|cat -n|rg -i "$(bspc query -N -n .floating.hidden.window|sed -z 's/\n\(\w\)/|\1/g')")

# hide matched windows that are visible
idnothidden=$(cat <<< "$id"|rg -i "$(echo "$(bspc query -N -n .floating.\!hidden.window||echo "%@#")"|sed -z 's/\n\(\w\)/|\1/g')")
cat <<< "$idnothidden"|xargs -i bspc node {} --flag hidden=on 

# keep the window stack position if the window loses focus
if [ -z "$rawindex" ] && ! [ -z "$idnothidden" ] && [ "$BEHAVIOUR" != "nomark" ];then
    exit
fi

# remove the mark of all matched visible windows
cat <<< "$id"|xargs -i bspc node {} --flag marked=off 


nextindex=$(($index))
filtered=$(cat <<< "$idhidden"|awk -v nextindex="$nextindex" '$1 >= nextindex {print $2}')
# filtered=$(cat <<< "$idhidden"|sed "${nextindex}q;d"|awk '{ print $2 }')


if [ "$BEHAVIOUR" == "i3" ]; then
    # if the focused window is matched, then mark the next matched window and hide the current one
    if ! [ -z "$rawindex" ];then
        bspc node $(cat <<< "$rawindex"|awk '{print $2}') --flag marked=off 
        bspc node "$(cat <<< "$filtered"|head -n 1)" --flag marked=on
        exit
    fi
fi

if ! [ -z "$rawindex" ] || [ -z "$idnothidden" ];then
    if [ "$BEHAVIOUR" != "nomark" ];then
        # mark and show the matched window 
        bspc node "$(cat <<< "$filtered"|head -n 1)" --flag hidden  --flag marked=on --to-monitor focused --focus
    else
        # show the matched window 
        bspc node "$(cat <<< "$filtered"|head -n 1)" --flag hidden  --to-monitor focused --focus
    fi
fi


